package com.demo;

import java.util.*;
import java.util.function.BiFunction;
import java.util.function.BinaryOperator;
import java.util.function.Predicate;
import java.util.stream.Collectors;

import static java.util.Comparator.comparing;
import static java.util.stream.Collectors.*;


public class CopyOfDemoBookCaseStudyProblem {

	public static void main(String[] args) {

		List<Book> allBooks = loadAllBooks();

		// 1. Find books with more then 400 pages
		System.out.println("All books more then 400 pages");
		List<Book>booksMoreThen400Pages=allBooks.stream()
				.filter(b-> b.getPages()>400).collect(Collectors.toList());

		booksMoreThen400Pages.forEach(System.out::println);
		
		// 2. Find all books that are java books and more then 400 pages
		System.out.println("Java books more then 400 pages");
		List<Book> javaBooks=allBooks.stream().filter( b-> b.getSubject().equals(Subject.JAVA)).collect(Collectors.toList());
		javaBooks.forEach(System.out::println);
		// 3. We need the top three longest books
		System.out.println("Top 3 longest books");
	     List<Book> top3LongestBooks=allBooks.stream()
				.sorted(comparing(Book::getPages).reversed())
				.limit(3).collect(Collectors.toList());
		top3LongestBooks.forEach(System.out::println);
		// 4. We need from the fourth to the last longest books
        System.out.println("4th to last longest books");
		List<Book> fourthToLastLongestBooks=allBooks.stream()
				.sorted(comparing(Book::getPages).reversed())
				.skip(3).collect(Collectors.toList());
		fourthToLastLongestBooks.forEach(System.out::println);

		// 5. We need to get all the publishing years
		System.out.println("All publishing years");
		List<Integer> publishingYears=allBooks.stream().map(Book::getYear).collect(Collectors.toList());
		publishingYears.forEach(System.out::println);
		// 6. We need all the authors names who have written a book
		System.out.println("All authors names");
        allBooks.stream().map(Book::getAuthors).flatMap(a->a.stream()).map(Author::getName).distinct().forEach(System.out::println);


		// We need all the origin countries of the authors
        System.out.println("All origin countries");
		allBooks.stream().map(Book::getAuthors).flatMap(a->a.stream()).map(Author::getCountry).distinct().forEach(System.out::println);
		// We want the most recent published book.
	    System.out.println("Most recent published book");
		allBooks.stream().sorted(comparing(Book::getYear).reversed()).limit(1).forEach(System.out::println);
		// We want to know if all the books are written by more than one author
        System.out.println("All books are written by more than one author");
		System.out.println(allBooks.stream().map(Book::getAuthors).allMatch(a->a.size()>1));
			// We want one of the books written by more than one author. (findAny)
		System.out.println("One of the books written by more than one author");
		allBooks.stream().map(Book::getAuthors).flatMap(a->a.stream()).findAny().ifPresent(System.out::println);
		
		// We want the total number of pages published.
		System.out.println("Total number of pages published");
		List<Integer> totalpages=allBooks.stream().map(Book::getPages).collect(Collectors.toList());
		int sum=0;
		for(int i=0;i<totalpages.size();i++) {
			sum+=totalpages.get(i);
		}
		System.out.println(sum);


	
		// We want to know how many pages the longest book has.
		System.out.println(" No of pages in Longest book");
    allBooks.stream().map(Book::getPages).max(Integer::compare).ifPresent(System.out::println);
		// We want the average number of pages of the books
		System.out.println("Average number of pages of the books");
	System.out.println(sum/totalpages.size());
		// We want all the titles of the books
System.out.println("All the titles of the books");
allBooks.stream().map(Book::getTitle).forEach(System.out::println);

	
		// We want the book with the higher number of authors?
 System.out.println("Book with the higher number of authors");
		// We want a Map of book per year.
		Optional<Book>highernoofauthors=allBooks.stream().collect(maxBy(comparing(b->b.getAuthors().size())));
        System.out.println(highernoofauthors.orElse("Book with High number of authors not found"));
		System.out.println("Map of book per year");

		Map<Integer,List<Book>> bookperyear=allBooks.stream().collect(groupingBy(Book::getYear));// We want to count how many books are published per year.
		bookperyear.forEach((key, value) -> System.out.println(key + " " + value.size()));
		System.out.println("Count how many books are published per year");
		bookperyear.forEach((key, value) -> System.out.println(key + " " + value.size()));

	}

	private static List<Book> loadAllBooks() {
		List<Book> books = new ArrayList<Book>();
		List<Author> authors1 = Arrays.asList(new Author("raj", "gupta", "in"),
				new Author("ekta", "gupta", "in"));

		List<Author> authors2 = Arrays.asList(new Author("raj", "gupta", "in"));

		List<Author> authors3 = Arrays.asList(new Author("gunika", "gupta", "us"),
				new Author("keshav", "gupta", "us"));

		books.add(new Book("java", authors1, 400, Subject.JAVA, 2000, "1213"));
		books.add(new Book("python", authors2, 479, Subject.JAVA, 2007, "1218"));
		books.add(new Book("Mgt", authors3, 600, Subject.DOT_NET, 2000, "1293"));
		books.add(new Book("C", authors3, 1600, Subject.DOT_NET, 2010, "1743"));


		return books;
	}

}
